---
title: HArray
---

An array representation. \

# Methods

## new_from_values

`new_from_values(arr: array, dtype: HDataType) -> HArray` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L45) </span> \

Creates a new `HArray` from an R array. \

#### Arguments

* `arr` \
A `double` or `complex` array.
* `dtype` \
An `HDataType` to indicate which type of `HArray` to be created. \
For float dtypes, the atomic vector must be a `double`. For complex dtypes, a `complex` atomic vector.

#### Returns

An `HArray`. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
HArray$new_from_values(arr, dtype)
```

_________

## len

`len() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L113) </span> \

Returns the number of elements of this `Harray`. \

#### Returns

An `integer`. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$len()
```

_________

## shape

`shape() -> integers` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L141) </span> \

Returns the shape of this `HArray`. \

#### Returns

A vector of integers. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$shape()
```

_________

## ndim

`ndim() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L169) </span> \

Returns the number of dimensions of this `HArray`. \

#### Returns

An integer. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$ndim()
```

_________

## slice

`slice(range: list[atomicvector]) -> HArray` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L207) </span> \

Slices the HArray. \
This operation has a COW ([clone-on-write](https://doc.rust-lang.org/std/borrow/enum.Cow.html)) behaviour. The created slice shares the inner data with
the original array until one of them is modified. \

#### Arguments

* `range` \
A list of vectors of integers.
The number of vectors in the list must be equal to the number of dimensions in the original HArray as they represent the slice information for each axis. \
Each vector must be composed of 3 elements: [start, end, step]. All 3 values can be
positive or negative, although step can't be 0. \

#### Returns

An `HArray`. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$slice(list(c(0L, 2L, 1L), c(1L, 3L, 1L)))
```

_________

## print

`print()` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L233) </span> \

Prints the `HArray`. \
Differently from R's normal behaviour, `print` doesn't return the value invisibly. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$print()

# or similarly:
print(harray)
```

_________

## eq

`eq(other: HArray) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L274) </span> \

Equality with another `HArray`. \
The comparison only checks if the dtype and the values are the same. To compare if the
underlying data is the same in memory, check `mem_adress`. \

#### Arguments

* `other` \
An `HArray`. \

#### Returns

A `bool`. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray1 = HArray$new_from_values(arr, dtype)

arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray2 = HArray$new_from_values(arr, dtype)

harray1$eq(harray2) # TRUE

# or similarly:
harray1 == harray2
```

_________

## ne

`ne(other: HArray) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L317) </span> \

Difference with another `HArray`. \
The comparison only checks if the dtype and the values are the same. To compare if the
underlying data is the same in memory, check `mem_adress`.

#### Arguments

* `other` \
An `HArray`.

#### Returns

A `bool`.

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray1 = HArray$new_from_values(arr, dtype)

arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray2 = HArray$new_from_values(arr, dtype)

harray1$ne(harray2) # FALSE

# or similarly:
harray1 != harray2
```

_________

## clone

`clone() -> HArray` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L346) </span> \

Creates a new `HArray`, with the underlying data pointing to the same place in memory.

#### Returns

An `HArray`.

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray1 = HArray$new_from_values(arr, dtype)
harray2 = harray1$clone()
harray1 == harray2 # TRUE
```

_________

## collect

`collect() -> array` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L372) </span> \

Creates an R array from an `HArray`. The type of the array created (`double` or `complex`) will depend on the `HArray`'s dtype.

#### Returns

An array of type `double` or `complex`.

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$collect()
```

_________

## dtype

`dtype() -> HDataType` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L398) </span> \

Gets the `HArray`'s dtype as an `HDataType`.

#### Returns

An `HDataType`.

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$dtype()
```

_________

## is_shared

`is_shared() -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L429) </span> \

Checks if the object is shared. \
Since `HArray` has a COW ([clone-on-write](https://doc.rust-lang.org/std/borrow/enum.Cow.html)) behaviour, this function is useful to check if a new
object will be created or if the change will be done in-place. \

#### Returns

A `bool`. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray1 = HArray$new_from_values(arr, dtype)
harray1$is_shared() # FALSE.

harray2 = harray1$clone()
harray$is_shared() # TRUE, HArray object shared with harray2.
```

_________

## mem_adress

`mem_adress() -> string` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/harray.rs#L458) </span> \

The memory adress of the first element of the inner array. \
This is useful to check if different objects share the same underlying data. \

#### Returns

A `string`. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$float32
harray = HArray$new_from_values(arr, dtype)
harray$mem_adress()
```

_________
