---
title: HDataType
---

A type representation. \
Supports `Float32`, `Float64`, `Complex32` and `Complex64` types. \

# Methods

## float32

`float32 -> HDataType` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/hdatatype.rs#L39) </span> \

Creates a Float32 `HDataType`. \

#### Returns

An `HDataType`. \

#### Examples

```r
dtype = HDataType$float32
```

_________

## float64

`float64 -> HDataType` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/hdatatype.rs#L62) </span> \

Creates a Float64 `HDataType`. \

#### Returns

An `HDataType`. \

#### Examples

```r
dtype = HDataType$float64
```

_________

## complex32

`complex32 -> HDataType` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/hdatatype.rs#L85) </span> \

Creates a Complex32 `HDataType`. \

#### Returns

An `HDataType`. \

#### Examples

```r
dtype = HDataType$complex32
```

_________

## complex64

`complex64 -> HDataType` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/hdatatype.rs#L108) </span> \

Creates a Complex64 `HDataType`. \

#### Returns

An `HDataType`. \

#### Examples

```r
dtype = HDataType$complex64
```

_________

## print

`print()` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/hdatatype.rs#L132) </span> \

Prints the `HDataType`. \
Differently from R's behaviour, `print` doesn't return the value invisibly. \

#### Examples

```r
dtype = HDataType$complex64
dtype$print()

# or similarly:
print(dtype)
```

_________

## eq

`eq(other: HDataType) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/hdatatype.rs#L165) </span> \

Equality with another `HDataType`. \

#### Arguments

* `other` \
An `HDataType`. \

#### Returns

A `bool`.

#### Examples

```r
hdatatype1 = HDataType$float32
hdatatype2 = HDataType$float32
hdatatype1$eq(hdatatype2) # TRUE

# or similarly:
hdatatype1 == hdatatype2
```

_________

## ne

`ne(other: HDataType) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./rust/src/hdatatype.rs#L198) </span> \

Difference with another `HDataType`. \

#### Arguments

* `other` \
An `HDataType`. \

#### Returns

A `bool`. \

#### Examples

```r
hdatatype1 = HDataType$float32
hdatatype2 = HDataType$float64
hdatatype1$ne(hdatatype2) # TRUE

# or similarly:
hdatatype1 != hdatatype2
```

_________
