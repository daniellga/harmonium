---
title: HAudio
---

A structure to represent audio data. Composed by: \

* `HMatrix` \
The decoded audio data as a floating point time series. Each column represents a channel. \
Must have a float dtype. \

* `integer`. \
The sampling rate in hz. \

# Methods

## new_from_file

`new_from_file(fpath: string, offset: double, duration: double, dtype: HDataType) -> HAudio` \

Creates a new `HAudio` from an audio file. \

#### Arguments

* `fpath` \
A `string` for the input file path. \
* `offset` (default = `NA`) \
A `double`. Start reading the file after `offset`, in seconds. \
If `NA`, will load from the beginning of the file. \
* `duration` (default = `NA`) \
A `double`. Duration to be loaded, in seconds, counting from `offset`. Will load the file till the end if `offset + duration >= file length`. \
If `NA`, will load until the end of the file. \
* `dtype` \
A float `HDataType` to indicate which type of `HAudio` to be created. \

#### Returns

An `HAudio`. \

#### Examples

```r
dtype = HDataType$float32
haudio = HAudio$new_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav", dtype = dtype)
haudio2 = HAudio$new_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav", offset = 1, duration = 2, dtype = dtype) # Reads the file from 1 second to 3 seconds.
```

_________

## new_from_values

`new_from_values(values: matrix, sr: integer, dtype: HDataType) -> HAudio` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L121) </span> \

Creates a new `HAudio` from a matrix. \

#### Arguments

* `values` \
A `double` `matrix`. \
* `sr` \
An `integer`. The sampling rate in hz. \
* `dtype` \
A float `HDataType` to indicate which type of `HAudio` to be created. \

#### Returns

An `HAudio`. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
```

_________

## len

`len() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L148) </span> \

Returns the number of elements of this `HAudio`. \

#### Returns

An `integer`. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio$len()
```

_________

## nchannels

`nchannels() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L175) </span> \

Returns the number of channels of this `HAudio`. \
This is the same as the number of columns of the inner `HMatrix`. \

#### Returns

An `integer`. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio$nchannels()
```

_________

## nframes

`nframes() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L202) </span> \

Returns the number of frames of this `HAudio`. \
This is the same as the number of rows of the inner `HMatrix`. \

#### Returns

An `integer`. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio$nframes()
```

_________

## print

`print()` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L228) </span> \

Print the `HAudio`. \
Differently from R's normal behaviour, `print` doesn't return the value invisibly. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio$print()

# or similarly:
print(haudio)
```

_________

## as_hmatrix

`as_hmatrix() -> HMatrix` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L256) </span> \

Creates a new `HMatrix`, with the underlying data pointing to the same place in memory. \

#### Returns

An `HMatrix`.

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
hmatrix = haudio$as_hmatrix()

haudio$mem_adress() == hmatrix$mem_adress() # TRUE
```

_________

## eq

`eq(other: HAudio) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L293) </span> \

Equality with another `HAudio`. \
The comparison only checks if the dtype, the sampling rate and the values are the same. To compare if the
underlying data is the same in memory, check `mem_adress`. \

#### Arguments

* `other` \
An `HAudio`. \

#### Returns

A `bool`. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio1 = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio2 = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio1$eq(haudio2) # TRUE

# or similarly:
haudio1 == haudio2
```

_________

## ne

`ne(other: HAudio) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L330) </span> \

Difference with another `HAudio`. \
The comparison only checks if the dtype, the sampling rate and the values are the same. To compare if the
underlying data is the same in memory, check `mem_adress`. \

#### Arguments

* `other` \
An `HAudio`. \

#### Returns

A `bool`. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio1 = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio2 = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio1$ne(haudio2) # FALSE

# or similarly:
haudio1 != haudio2
```

_________

## clone

`clone() -> HAudio` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L358) </span> \

Creates a new `HAudio`, with the underlying data pointing to the same place in memory.

#### Returns

An `HAudio`.

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio1 = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio2 = haudio1$clone()
haudio1 == haudio2 # TRUE
haudio1$mem_adress() == haudio2$mem_adress() # TRUE
```

_________

## collect

`collect() -> matrix` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L384) </span> \

Creates a `matrix` from an `HAudio`.

#### Returns

A `matrix` of type `double`.

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio$collect()
```

_________

## sr

`sr() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L410) </span> \

Get the sampling rate.

#### Returns

An `integer`.

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio$sr()
```

_________

## mem_adress

`mem_adress() -> string` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L445) </span> \

The memory adress of the first element of the inner data. \
This is useful to check if different objects share the same underlying data. \
It's important that the offset of both objects is at the same element for this comparison. \

#### Returns

A `string`. \

#### Examples

```r
harray = HArray$new_from_values(c(1,2,3,4), HDataType$float64)
hmatrix = harray$as_hmatrix(ncols = 2L)
haudio = hmatrix$as_haudio(sr = 3L)
harray$mem_adress() == hmatrix$mem_adress() # TRUE
harray$mem_adress() == haudio$mem_adress() # TRUE

harray$slice(1L,1L) # changing the offset to 1
harray$mem_adress() == haudio$mem_adress() # FALSE, even though they still share the same underlying data

haudio2 = haudio
haudio$mem_adress() == haudio2$mem_adress() # TRUE, since `=` operator only creates an alias (haudio and haudio2 are the same external pointer).
```

_________

## dtype

`dtype() -> HDataType` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L471) </span> \

Gets the `HAudio`'s dtype as an `HDataType`.

#### Returns

An `HDataType`.

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
haudio$dtype()
```

_________

## as_mono

`as_mono()` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./haudio.rs#L496) </span> \

Convert to 1 channel by taking the average across channels. \
A new inner array is created. The operation is done in-place. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
haudio = HAudio$new_from_values(values = values, sr = 3L, dtype = dtype)
mem_adress_before = haudio$mem_adress()
haudio$as_mono()
haudio$mem_adress() != mem_adress_before # TRUE
```

_________
