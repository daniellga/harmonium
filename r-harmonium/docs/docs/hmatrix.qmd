---
title: HMatrix
---

A column major matrix representation. \

# Methods

## new_from_values

`new_from_values(values: matrix, dtype: HDataType) -> HMatrix` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L72) </span> \

Creates a new `HMatrix` from a `matrix`. \

#### Arguments

* `values` \
A `double` or `complex` `matrix`. \
* `dtype` \
An `HDataType` to indicate which type of `HMatrix` to be created. \
For float dtypes, the `matrix` must be a `double`. For complex dtypes, a `complex`. \

#### Returns

An `HMatrix`. \

#### Examples

```r
values = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol = 2)
dtype = HDataType$float32
HMatrix$new_from_values(values, dtype)
```

_________

## new_from_arrow

`new_from_arrow(values: FixedSizeListArray, dtype: HDataType) -> HMatrix` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L162) </span> \

Creates a new `HMatrix` from an R's arrow [`FixedSizeListArray`](https://arrow.apache.org/docs/r/reference/array.html). \
The conversion is zero copy. \

#### Arguments

* `values` \
A float32 or float64 arrow `FixedSizeListArray`. \
* `dtype` \
An `HDataType` to indicate which type of `HMatrix` to be created. \

#### Returns

An `HMatrix`. \

#### Examples

```r
values = arrow::Array$create(list(c(1,2,3,4), c(5,6,7,8)), arrow::fixed_size_list_of(arrow::float32(), 4))
dtype = HDataType$complex32
hmatrix = HMatrix$new_from_arrow(values, dtype)

# to convert back to R's arrow FixedSizeListArray.
values2 = arrow::as_arrow_array(hmatrix)
all.equal(values, values2) # TRUE
```

_________

## len

`len() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L227) </span> \

Returns the number of elements of this `HMatrix`. \

#### Returns

An `integer`. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix$len()
```

_________

## slice

`slice(offset: integer, length: integer)` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L272) </span> \

Slice the `HMatrix` by an offset and length. \
The operation is done on a column level, which means that `offset` always point at the
start of a column. For instance, an `offset` of 2 and `length` of 3 will slice the columns
3, 4 and 5. \
This operation is O(1). \
The function will modify in-place the current `HMatrix`. If a clone of the `HMatrix` has been
previously made, it will clone the `HMatrix` and slice it. \

#### Arguments

* `offset` \
An `integer` representing the offset starting from 0. \
* `length` \
An `integer` representing the desired length. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4,5,6,7,8,9), ncol = 3L), HDataType$float32)
hmatrix$slice(1L, 1L)
print(hmatrix)

# if the HMatrix object is not being shared, slicing it will modify the HMatrix in-place.
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4,5,6,7,8,9), ncol = 3L), HDataType$float32)
hmatrix$slice(1L, 1L)

# if the HMatrix object is being shared, slicing it will create a new HMatrix object.
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4,5,6,7,8,9), ncol = 3L), HDataType$float32)
hmatrix2 = hmatrix$clone()
hmatrix$is_shared() # TRUE
hmatrix$slice(1L, 1L) # now hmatrix is a different object in comparison with hmatrix2, although they share the same underlying data.
hmatrix$is_shared() # FALSE
```

_________

## ncols

`ncols() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L297) </span> \

Returns the number of columns of this `HMatrix`. \

#### Returns

An `integer`. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix$ncols()
```

_________

## nrows

`nrows() -> integer` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L321) </span> \

Returns the number of rows of this `HMatrix`. \

#### Returns

An `integer`. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix$nrows()
```

_________

## print

`print()` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L345) </span> \

Print the `HMatrix`. \
Differently from R's normal behaviour, `print` doesn't return the value invisibly. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix$print()

# or similarly:
print(hmatrix)
```

_________

## eq

`eq(other: HMatrix) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L380) </span> \

Equality with another `HMatrix`. \
The comparison only checks if the dtype and the values are the same. To compare if the
underlying data is the same in memory, check `mem_adress`. \

#### Arguments

* `other` \
An `HMatrix`. \

#### Returns

A `bool`. \

#### Examples

```r
hmatrix1 = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix2 = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix1$eq(hmatrix2) # TRUE

# or similarly:
hmatrix1 == hmatrix2
```

_________

## ne

`ne(other: HMatrix) -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L415) </span> \

Difference with another `HMatrix`. \
The comparison only checks if the dtype and the values are the same. To compare if the
underlying data is the same in memory, check `mem_adress`.

#### Arguments

* `other` \
An `HMatrix`.

#### Returns

A `bool`.

#### Examples

```r
hmatrix1 = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix2 = HMatrix$new_from_values(matrix(c(1,2,3)), HDataType$float32)
hmatrix1$ne(hmatrix2) # FALSE

# or similarly:
hmatrix1 != hmatrix2
```

_________

## clone

`clone() -> HMatrix` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L441) </span> \

Creates a new `HMatrix`, with the underlying data pointing to the same place in memory.

#### Returns

An `HMatrix`.

#### Examples

```r
hmatrix1 = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
hmatrix2 = hmatrix1$clone()
hmatrix1 == hmatrix2 # TRUE
hmatrix1$mem_adress() == hmatrix2$mem_adress() # TRUE
```

_________

## as_harray

`as_harray() -> HArray` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L467) </span> \

Creates a new `HArray`, with the underlying data pointing to the same place in memory. \

#### Returns

An `HArray`.

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
harray = hmatrix$as_harray()

harray$mem_adress() == hmatrix$mem_adress() # TRUE
```

_________

## as_haudio

`as_haudio(sr: integer) -> HAudio` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L498) </span> \

Creates a new `HAudio`, with the underlying data pointing to the same place in memory. \

#### Arguments

* `sr` \
An `integer`. The sampling rate in hz. \

#### Returns

An `HAudio`.

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
haudio = hmatrix$as_haudio(sr = 2L)

haudio$mem_adress() == hmatrix$mem_adress() # TRUE
```

_________

## collect

`collect() -> matrix` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L522) </span> \

Creates a `matrix` from an `HMatrix`. The type of the `matrix` created (`double` or `complex`) will depend on the `HMatrix`'s dtype.

#### Returns

A `matrix` of type `double` or `complex`.

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
hmatrix$collect()
```

_________

## mem_adress

`mem_adress() -> string` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L555) </span> \

The memory adress of the first element of the inner data. \
This is useful to check if different objects share the same underlying data. \
It's important that the offset of both objects is at the same element for this comparison. \

#### Returns

A `string`. \

#### Examples

```r
harray = HArray$new_from_values(c(1,2,3,4), HDataType$float64)
hmatrix = harray$as_hmatrix(ncols = 2L)
harray$mem_adress() == hmatrix$mem_adress() # TRUE

harray$slice(1L,1L) # changing the offset to 1
harray$mem_adress() == hmatrix$mem_adress() # FALSE, even though they still share the same underlying data

hmatrix2 = hmatrix
hmatrix$mem_adress() == hmatrix2$mem_adress() # TRUE, since `=` operator only creates an alias (hmatrix and hmatrix2 are the same external pointer).
```

_________

## dtype

`dtype() -> HDataType` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L579) </span> \

Gets the `HMatrix`'s dtype as an `HDataType`.

#### Returns

An `HDataType`.

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
hmatrix$dtype()
```

_________

## is_shared

`is_shared() -> bool` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L622) </span> \

Checks if the object is shared. \
Since `HMatrix` has a COW ([clone-on-write](https://doc.rust-lang.org/std/borrow/enum.Cow.html)) behaviour, this function is useful to check if a new
object will be created or if the change will be done in-place. \

#### Returns

A `bool`. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
hmatrix$is_shared() # FALSE.

harray = hmatrix$as_harray()
hmatrix$is_shared() # FALSE, since there's only one HMatrix object.
harray$mem_adress() == hmatrix$mem_adress() # TRUE, since they share the same underlying data.

hmatrix2 = hmatrix$clone()
hmatrix$is_shared() # TRUE, HMatrix object shared with hmatrix2.
hmatrix2$is_shared() # TRUE.
hmatrix$mem_adress() == hmatrix2$mem_adress() # TRUE, since they share the same underlying data.

hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
hmatrix2 = hmatrix$clone()
hmatrix$mem_adress() == hmatrix2$mem_adress() # TRUE
hmatrix$is_shared() # TRUE
hmatrix$slice(0L, 1L)
hmatrix$mem_adress() == hmatrix2$mem_adress() # TRUE. hmatrix and hmatrix2 still share the same underlying data.
hmatrix$is_shared() # FALSE, because a new HMatrix object was created for hmatrix.
```

_________

## fft

`fft() -> HMatrix` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L680) </span> \

Computes the fast fourier transform of the `HMatrix`. The fft is computed for each column. \
FFT (Fast Fourier Transform) refers to a way the discrete Fourier Transform (DFT) can be calculated efficiently,
by using symmetries in the calculated terms. The symmetry is highest when n is a power of 2, and the transform
is therefore most efficient for these sizes. \

The function does not normalize outputs. Callers must manually normalize the results by scaling each element by
`1/sqrt(n)`. Multiple normalization steps can be merged into one via pairwise multiplication, so when doing
a forward FFT followed by an inverse callers can normalize once by scaling each element by `1/n`. \

Elements in the output are ordered by ascending frequency, with the first element corresponding to frequency 0. \

#### Returns

An `HMatrix`. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
hmatrix$fft()
```

_________

## mean_cols

`mean_cols()` <span style="float: right;"> [source](https://www.github.com/daniellga/harmonium/blob/master/r-harmonium/src/rust/src/./hmatrix.rs#L703) </span> \

Takes the average across columns. \
A new inner array is created. The operation is done in-place. \

#### Examples

```r
hmatrix = HMatrix$new_from_values(matrix(c(1,2,3,4), ncol = 2L), HDataType$float32)
mem_adress_before = hmatrix$mem_adress()
hmatrix$mean_cols()
hmatrix$mem_adress() != mem_adress_before # TRUE
```

_________
