---
title: HAudioSink
---

Handle to a device that outputs sounds. \

# Methods

## new

`new() -> HAudioSink` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L42) </span> \

Creates a new `HAudioSink` instance. \
The sink is set on "play" mode from the start. \

#### Returns

An `HAudioSink`. \

#### Examples

```r
haudiosink = HAudioSink$new()
```

_________

## append_from_harray

`append_from_harray(harray: HArray)` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L69) </span> \

Appends a sound to the queue of sounds to play. \

#### Arguments

* `harray` \
An `HArray`. \

#### Examples

```r
haudiosink = HAudioSink$new()
l = HFile$decode(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav", dtype = HDataType$float32)
harray = l[[1]]
haudiosink$append_from_harray(harray)
```

_________

## append_from_file

`append_from_file(fpath: string)` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L127) </span> \

Appends a sound to the queue of sounds to play. \

#### Arguments

* `fpath` \
The file path as a `string`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
```

_________

## play

`play()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L157) </span> \

Resumes playback of a paused sink. \
No effect if not paused. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$pause()
haudiosink$is_paused() # TRUE
haudiosink$play()
haudiosink$is_paused() # FALSE
```

_________

## stop

`stop()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L184) </span> \

Stops the sink by emptying the queue. \
The sink will keep its previous state (play or pause). \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$len() == 2 # TRUE
haudiosink$stop()
haudiosink$len() == 0 # TRUE
haudiosink$is_paused() # FALSE
```

_________

## pause

`pause()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L210) </span> \

Pauses playback of this sink. \
No effect if already paused. \
A paused sink can be resumed with play(). \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$is_paused() # FALSE
haudiosink$pause()
haudiosink$is_paused() # TRUE
```

_________

## is_paused

`is_paused() -> bool` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L239) </span> \

Gets if a sink is paused. \
Sinks can be paused and resumed using pause() and play(). This returns true if the sink is paused. \

#### Returns

A `bool`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$is_paused() # FALSE
haudiosink$pause()
haudiosink$is_paused() # TRUE
```

_________

## volume

`volume() -> double` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L267) </span> \

Gets the volume of the sound. \
The value 1.0 is the “normal” volume (unfiltered input). Any value other than 1.0 will multiply each sample by this value. \

#### Returns

A `double`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$volume()
```

_________

## set_volume

`set_volume(value: double)` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L297) </span> \

Changes the volume of the sound. \
The value 1.0 is the “normal” volume (unfiltered input). Any value other than 1.0 will multiply each sample by this value. \

#### Arguments

* `value` \
A `double`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$set_volume(2)
haudiosink$volume() == 2 # TRUE
```

_________

## speed

`speed() -> double` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L325) </span> \

Gets the speed of the sound. \
The value 1.0 is the “normal” speed (unfiltered input). Any value other than 1.0 will change the play speed of the sound. \

#### Returns

A `double`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$speed()
```

_________

## set_speed

`set_speed(value: double)` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L355) </span> \

Changes the speed of the sound. \
The value 1.0 is the “normal” speed (unfiltered input). Any value other than 1.0 will change the play speed of the sound. \

#### Arguments

* `value` \
A `double`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$set_speed(2)
haudiosink$speed() == 2 # TRUE
```

_________

## sleep_until_end

`sleep_until_end()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L378) </span> \

Sleeps the current thread until the sound ends. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$sleep_until_end()
```

_________

## len

`len() -> integer` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L406) </span> \

Returns the number of sounds currently in the queue. \

#### Returns

An `integer`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$len() == 0 # TRUE
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$len() == 2 # TRUE
```

_________

## is_empty

`is_empty() -> bool` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L431) </span> \

Returns true if this sink has no more sounds to play. \

#### Returns

A `bool`. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$is_empty() # TRUE
```

_________

## clear

`clear()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L456) </span> \

Removes all currently loaded `Source`s from the `Sink` and pauses it. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$clear()
haudiosink$is_empty() # TRUE
haudiosink$is_paused() # TRUE
```

_________

## skip_one

`skip_one()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L483) </span> \

Skips to the next `Source` in the `Sink`. \
If there are more `Source`s appended to the `Sink` at the time, it will play the next one.
Otherwise, the `Sink` will finish as if it had finished playing a `Source` all the way through. \

#### Examples

```r
haudiosink = HAudioSink$new()
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$append_from_file(fpath = "../../../testfiles/gs-16b-2c-44100hz.wav")
haudiosink$len() == 2 # TRUE
haudiosink$skip_one()
haudiosink$len() == 1 # TRUE
```

_________

## audio_output_devices

`audio_output_devices() -> atomicvector` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L507) </span> \

Provides a list of available audio output devices. \

#### Returns

A character atomic vector. \

#### Examples

```r
HAudioSink$audio_output_devices()
```

_________

## audio_default_device

`audio_default_device() -> string` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L532) </span> \

Informs the default audio output device. \

#### Returns

A `string`. \

#### Examples

```r
HAudioSink$audio_default_device()
```

_________

## audio_supported_configs

`audio_supported_configs() -> atomicvector` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src//haudiosink.rs#L563) </span> \

Provides the supported configurations for the default audio output device. \
The following informations are given: \

* Number of channels. \
* Minimum and maximum value for the sampling rate. \
* Minimum and maximum value for the buffer size. \
* Type of data expected by the device. \

#### Returns

A character atomic vector. \

#### Examples

```r
HAudioSink$audio_supported_configs()
```

_________
