---
title: HFile
---

A collection of methods designed to streamline input and output operations. \

# Methods

## decode

`decode(fpath: string, dtype: HDataType) -> HDecodedAudio` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfile.rs#L160) </span> \

Decode an audio file, providing its decoded data and the sampling rate. \
The samples are normalized to fit in the range of \[-1.0, 1.0\].

#### Arguments

* `fpath` \
The file path as a string. \
* `dtype` \
A float `HDataType`. \

#### Returns

An HDecodedAudio containing: \
* The decoded audio as a float HArray. \
* The sampling rate as an integer. \

#### Examples

```r
library(harmonium)
fpath = "../../../testfiles/gs-16b-2c-44100hz.flac"
dtype = HDataType$Float32
HFile$decode(fpath, dtype)
```

_________

## decode_stream

`decode_stream(fpath: string, frames: integer, dtype: HDataType) -> HDecoderStream` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfile.rs#L214) </span> \

Creates an `HDecoderStream`, used as an iterator to stream frames of decoded audio. \


#### Arguments

* `fpath` \
The file path as a string. \
* `frames` \
Number of frames to decode per iteration. \
* `dtype` \
A float `HDataType`. \

#### Returns

An `HDecoderStream`. \

#### Examples

```r
library(harmonium)
fpath = "../../../testfiles/gs-16b-2c-44100hz.flac"
dtype = HDataType$Float32
frames = 1000L
HFile$decode_stream(fpath, frames, dtype)
```

_________

## metadata

`metadata(fpath: string, metadata_type: HMetadataType) -> list`

Extract text and visual metadata from a file.

Tags that are part of the container format are preferentially extracted. Additional tags that were found while probing will not be extracted.

The following metadata tagging formats are supported. \

- ID3v1
- ID3v2
- ISO/MP4
- RIFF
- Vorbis Comment (in OGG & FLAC)

Each `TextMetadata` will be comprised of a `Tag`, which contains the following fields:

- tag_key
    A key string indicating the type, meaning, or purpose of the Tags value. Note: The meaning of key is dependant of the underlying metadata format.
- tag_std_key
    If the Tagâ€™s key string is commonly associated with a typical type, meaning, or purpose, then if recognized a StandardTagKey will be assigned
    to this Tag. This is a best effort guess since not all metadata formats have a well defined or specified tag mapping. However, it is recommended that
    consumers prefer std_key over key, if provided.
    Check [`StandardTagKey`] for all the variants.
- tag_value
    The value of the Tag.

Each `VisualMetadata` will be comprised of the following fields:

- usage
## params

`params(fpath: string) -> atomicvector` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfile.rs#L419) </span> \

Get audio parameters from a file. \
Note that this avoids loading the contents into memory, and is therefore useful for querying these parameters from long files. \

#### Arguments

* `fpath` \
The file path as a string. \

#### Returns

A double atomic vector containing, in order: \
- sampling rate in Hz. \
- number of frames. \
- number of channels. \
- duration in seconds. \

#### Examples

```r
library(harmonium)
fpath = "../../../testfiles/gs-16b-2c-44100hz.flac"
HFile$params(fpath)
```

_________

## verify

`verify(fpath: string) -> string <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfile.rs#L456) </span> \

Verify an audio file, if supported by the decoder. \
The verification is done after the decoding process is finished. \

#### Arguments

* `fpath` \
The file path as a string. \

#### Returns

A string. \
One of \["passed", "failed", "not_supported"\] \

#### Examples

```r
library(harmonium)
fpath = "../../../testfiles/gs-16b-2c-44100hz.flac"
HFile$verify(fpath)
```

_________
