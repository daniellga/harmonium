---
title: HRealFft
---

## new

`new(length: integer, dtype: HDataType) -> HRealFft`<span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L522) </span> \

Creates a new `HRealFft` instance which will be used to calculate forward FFTs.

If you plan on creating multiple FFT instances, it is recommended to reuse the same planner for all of them. This is because the planner re-uses internal data
across FFT instances wherever possible, saving memory and reducing setup time (FFT instances created with one planner will never re-use data and buffers with
FFT instances created by a different planner).

In the constructor, the FftPlanner will detect available CPU features. If AVX, SSE, Neon, or WASM SIMD are available, it will set itself up to plan FFTs with
the fastest available instruction set. If no SIMD instruction sets are available, the planner will seamlessly fall back to planning non-SIMD FFTs.

#### Arguments

- `length`

An integer denoting the length of the input for forward FFTs and the length of the output for inverse FFTs. For 2D `HArray`'s, nrows must
be provided.

- `dtype`

An `HDataType` to indicate the dtype that the `HRealFft` will be working with. If float,
will calculate the forward FFT. If complex, will calculate the inverse FFT.

#### Returns

An `HRealFft`.

Will return an error if dtype is of a float type.

#### Examples

```r
library(harmonium)
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$Float32
harray = HArray$new_from_values(arr, dtype)
hfft = HRealFft$new(3L, harray$dtype())
```

_________

## process

`process(harray: HArray)`<span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L591) </span> \

Computes the fast fourier transform of a float `HArray` or the inverse fast fourier transform of a complex `HArray`.
For a real forward FFT, transforms a real signal of length `N` to a complex-valued spectrum of length `N/2+1` (with `N/2` rounded down).
For a real inverse FFT, transforms a complex spectrum of length `N/2+1` (with `N/2` rounded down) to a real-valued
signal of length `N`.

The operation is not done in-place, although the same external pointer is used to store the new HArray.

The FFT of a real signal is Hermitian-symmetric, X[i] = conj(X[-i]) so the output contains only the positive frequencies
below the Nyquist frequency.

FFT (Fast Fourier Transform) refers to a way the discrete Fourier Transform (DFT) can be calculated efficiently,
by using symmetries in the calculated terms. The symmetry is highest when n is a power of 2, and the transform
is therefore most efficient for these sizes.

The function does not normalize outputs. Callers must manually normalize the results by scaling each element by
`1/sqrt(n)`. Multiple normalization steps can be merged into one via pairwise multiplication, so when doing
a forward FFT followed by an inverse callers can normalize once by scaling each element by `1/n`.

Elements in the output are ordered by ascending frequency, with the first element corresponding to frequency 0.

#### Arguments

- `harray`

An `HArray`.

#### Returns

Will return an error if:

- The `HArray`'s dtype is incompatible with the `HRealFft`'s dtype.

- The `HArray`'s `ndim` is greater than 2.

#### Examples

```r
library(harmonium)
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$Float32
harray = HArray$new_from_values(arr, dtype)
# Forward fft
fft = HRealFft$new(3L, harray$dtype())
fft$process(harray)
# Inverse fft
ifft = HRealFft$new(3L, HDataType$Complex32)
ifft$process(harray)
```

_________

## dtype

`dtype() -> HDataType`<span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L620) </span> \

Gets the `HRealFft`'s dtype.

#### Returns

An `HDataType`.

#### Examples

```r
library(harmonium)
arr = array(c(1+1i,2+2i,3+3i,4+4i,5+5i,6+6i), c(3,2))
dtype = HDataType$Complex32
harray = HArray$new_from_values(arr, dtype)
hfft = HRealFft$new(3L, HDataType$Complex32)
hfft$dtype()
```

_________

## print

`print()`<span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L649) </span> \

Prints the `HRealFft`.

Differently from R's normal behaviour, `print` doesn't return the value invisibly.

#### Examples

```r
library(harmonium)
arr = array(c(1+1i,2+2i,3+3i,4+4i,5+5i,6+6i), c(3,2))
dtype = HDataType$Complex32
harray = HArray$new_from_values(arr, dtype)
hfft = HRealFft$new(3L, HDataType$Complex32)
hfft$print()

# or similarly:
print(hfft)
```

_________

## clone

`clone() -> HRealFft`<span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L682) </span> \

Clones the `HRealFft`.

Creates a new `HRealFft`, with the underlying data pointing to the same place in memory.
When `HFFT` is cloned, having more than one reference to the same internal struct, and `process` is run, it uses the same cached `Fft` instance, but a new
scratch buffer will have to be allocated.

#### Returns

An `HRealFft`.

#### Examples

```r
library(harmonium)
arr = array(c(1+1i,2+2i,3+3i,4+4i,5+5i,6+6i), c(3,2))
dtype = HDataType$Complex32
harray = HArray$new_from_values(arr, dtype)
hfft = HRealFft$new(3L, HDataType$Complex32)
hfft$clone()
```

_________

## is_unique

`is_unique() -> bool`<span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L716) </span> \

Checks if the object is shared.

Since `HRealFft` has a COW ([clone-on-write](https://doc.rust-lang.org/std/borrow/enum.Cow.html)) behaviour, this function is useful to check if a new
object will be created or if the change will be done in-place.

#### Returns

A bool.

#### Examples

```r
library(harmonium)
arr = array(c(1+1i,2+2i,3+3i,4+4i,5+5i,6+6i), c(3,2))
dtype = HDataType$Complex32
harray = HArray$new_from_values(arr, dtype)
hfft = HRealFft$new(3L, HDataType$Complex32)
hfft$is_unique() # TRUE.

hfft2 = hfft$clone()
hfft$is_unique() # FALSE, HRealFft object shared with hfft2.
```

_________

## invalidate

`invalidate()`<span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L744) </span> \

Replaces the inner value of the external pointer, invalidating it.
This function is useful to remove one of the shared references of the inner pointer in rust.

#### Examples

```r
library(harmonium)
arr = array(c(1+1i,2+2i,3+3i,4+4i,5+5i,6+6i), c(3,2))
dtype = HDataType$Complex32
harray = HArray$new_from_values(arr, dtype)
hfft = HRealFft$new(3L, HDataType$Complex32)
hfft$invalidate()
```

_________
