---
title: HPolynomialDegree
---

Degree of the polynomial used for interpolation. A higher degree gives a higher quality result, while taking longer to compute. \

* `Septic` \
Septic polynomial, fitted using 8 sample points. \

* `Quintic`. \
Quintic polynomial, fitted using 6 sample points. \

* `Cubic`. \
Cubic polynomial, fitted using 4 sample points. \

* `Linear`. \
Linear polynomial, fitted using 2 sample points. \

* `Nearest`. \
Nearest, uses the nearest sample point without any fitting. \

# Methods

## print

`print()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hpolynomialdegree.rs#L57) </span> \

Prints the `HPolynomialDegree`. \
Differently from R's behaviour, `print` doesn't return the value invisibly. \

#### Examples

```r
pol_deg = HPolynomialDegree$Complex64
pol_deg$print()

# or similarly:
print(pol_deg)
```

_________

## eq

`eq(other: HPolynomialDegree) -> bool` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hpolynomialdegree.rs#L91) </span> \

Equality with another `HPolynomialDegree`.

#### Arguments

* `other` \
An `HPolynomialDegree`. \

#### Returns

A `bool`.

#### Examples

```r
pol_deg1 = HPolynomialDegree$quintic
pol_deg2 = HPolynomialDegree$quintic
pol_deg1$eq(pol_deg2) # TRUE

# or similarly:
pol_deg1 == pol_deg2
```

_________

## ne

`ne(other: HPolynomialDegree) -> bool` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hpolynomialdegree.rs#L126) </span> \

Difference with another `HPolynomialDegree`.

#### Arguments

* `other` \
An `HPolynomialDegree`. \

#### Returns

A `bool`.

#### Examples

```r
pol_deg1 = HPolynomialDegree$quintic
pol_deg2 = HPolynomialDegree$nearest
pol_deg1$ne(pol_deg2) # TRUE

# or similarly:
pol_deg1 != pol_deg2
```

_________
