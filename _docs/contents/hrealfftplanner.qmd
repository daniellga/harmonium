---
title: HRealFftPlanner
---

A planner is used to create FFTs. It caches results internally, so when making more than one FFT it is advisable to reuse the same planner. \
This planner is used to calculate FFTs of real valued inputs and its inverse operation. \

# Methods

## new

`new(dtype: HDataType) -> HRealFftPlanner` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L264) </span> \

Creates a new `HRealFftPlanner` instance. \
If you plan on creating multiple FFT instances, it is recommended to reuse the same planner for all of them. This is because the planner re-uses internal data
across FFT instances wherever possible, saving memory and reducing setup time. (FFT instances created with one planner will never re-use data and buffers with
FFT instances created by a different planner) \
In the constructor, the FftPlanner will detect available CPU features. If AVX, SSE, Neon, or WASM SIMD are available, it will set itself up to plan FFTs with
the fastest available instruction set. If no SIMD instruction sets are available, the planner will seamlessly fall back to planning non-SIMD FFTs. \

#### Arguments

* `dtype` \
A float `HDataType` to indicate the dtype that the `HFftPlanner` will be working with. \

#### Returns

An `HRealFftPlanner`. \
Will return an error if dtype is of a complex type. \

#### Examples

```r
library(harmonium)
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$Float32
harray = HArray$new_from_values(arr, dtype)
real_fft_planner = HRealFftPlanner$new(harray$dtype())
```

_________

## rfft

`rfft(harray: HArray)` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L316) </span> \

Computes the fast fourier transform of a float `HArray`. Transforms a real signal of length `N` to a complex-valued spectrum of length `N/2+1` (with `N/2` rounded down). \
The operation is not done in-place, although the same external pointer is used to store the new HArray. \
The FFT of a real signal is Hermitian-symmetric, X[i] = conj(X[-i]) so the output contains only the positive frequencies
below the Nyquist frequency. \
FFT (Fast Fourier Transform) refers to a way the discrete Fourier Transform (DFT) can be calculated efficiently,
by using symmetries in the calculated terms. The symmetry is highest when n is a power of 2, and the transform
is therefore most efficient for these sizes. \

The function does not normalize outputs. Callers must manually normalize the results by scaling each element by
`1/sqrt(n)`. Multiple normalization steps can be merged into one via pairwise multiplication, so when doing
a forward FFT followed by an inverse callers can normalize once by scaling each element by `1/n`. \

Elements in the output are ordered by ascending frequency, with the first element corresponding to frequency 0. \

#### Arguments

* `harray` \
A float `HArray`. \

#### Returns

Will return an error if: \
- The `HArray`'s dtype is incompatible with the `HFftPlanner`'s dtype. \
- The `HArray`'s `ndim` is greater than 2. \

#### Examples

```r
library(harmonium)
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$Float32
harray = HArray$new_from_values(arr, dtype)
real_fft_planner = HRealFftPlanner$new(harray$dtype())
real_fft_planner$rfft(harray)
```

_________

## irfft

`irfft(harray: HArray, length: integer)` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L368) </span> \

Computes the inverse fast fourier transform of a complex `HArray`. Transforms a complex spectrum of length `N/2+1` (with `N/2` rounded down) to a real-valued
signal of length `N`. \
The operation is not done in-place, although the same external pointer is used to store the new HArray. \
The FFT of a real signal is Hermitian-symmetric, X[i] = conj(X[-i]) so the output contains only the positive frequencies
below the Nyquist frequency. \
FFT (Fast Fourier Transform) refers to a way the discrete Fourier Transform (DFT) can be calculated efficiently,
by using symmetries in the calculated terms. The symmetry is highest when n is a power of 2, and the transform
is therefore most efficient for these sizes. \

The function does not normalize outputs. Callers must manually normalize the results by scaling each element by
`1/sqrt(n)`. Multiple normalization steps can be merged into one via pairwise multiplication, so when doing
a forward FFT followed by an inverse callers can normalize once by scaling each element by `1/n`. \

#### Arguments

* `harray` \
A complex `HArray`. The `HArray`'s dtype must be the complex equivalent of the `HRealFftPlanner`'s dtype. For example if `HRealFftPlanner` dtype is `Float64`,
the `HArray`'s dtype must be `Complex64`. \
* `length` \
An integer. The output length of the signal. Since the spectrum is `N/2+1`, the length can be `N` and `N+1`, if `N` is even, or can be `N` and `N-1` if `N` is odd.  \

#### Returns

Will return an error if: \
- The `HArray`'s dtype is incompatible with the `HFftPlanner`'s dtype. \
- The `HArray`'s `ndim` is greater than 2. \
- The `length` argument is not compatible with the spectrum length. \

#### Examples

```r
library(harmonium)
r = as.double(sample(100, 4, replace = TRUE))
i = as.double(sample(100, 3, replace = TRUE))
arr = array(complex(real=r, imaginary=c(0,i)), c(4,1))
dtype = HDataType$Complex32
harray = HArray$new_from_values(arr, dtype)
real_fft_planner = HRealFftPlanner$new(HDataType$Float32)
real_fft_planner$irfft(harray, 7L)
```

_________

## dtype

`dtype() -> HDataType` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L399) </span> \

Gets the `HRealFftPlanner`'s dtype.

#### Returns

An `HDataType`.

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$Float32
harray = HArray$new_from_values(arr, dtype)
real_fft_planner = HRealFftPlanner$new(harray$dtype())
real_fft_planner$dtype()
```

_________

## print

`print()` <span style="float: right;"> [source](https://github.com/daniellga/harmonium/tree/master/r-harmonium/src/rust/src/hfft.rs#L426) </span> \

Print the `HRealFftPlanner`. \
Differently from R's normal behaviour, `print` doesn't return the value invisibly. \

#### Examples

```r
arr = array(c(1,2,3,4,5,6,7,8,9,10,11,12), c(3,4))
dtype = HDataType$Float32
harray = HArray$new_from_values(arr, dtype)
real_fft_planner = HRealFftPlanner$new(harray$dtype())
real_fft_planner$print()

# or similarly:
print(real_fft_planner)
```

_________
